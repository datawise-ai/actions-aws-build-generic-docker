name: "datawise-aws-build-generic-docker"
description: "datawise AWS build and push generic container"
inputs:
  PROJECT:
    required: true
  APP:
    required: true
  SERVICE:
    required: true
  INSTANCE:
    required: true
  VERSION:
    required: true
  AWS_ACCESS:
    required: true
  AWS_SECRET:
    required: true
  AWS_ZONE:
    required: false
    default:  us-east-1
  QEMU_SETUP:
    required: false
    default: "true"
outputs:
  tagged_image:
    description: "tagged image"
    value: "${{ steps.set_outputs.outputs.tagged_image }}"
runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: ${{ inputs.QEMU_SETUP == 'true' }}

    - name: setup docker context for buildx
      id: buildx-context
      shell: bash
      run: |
        docker context create builders || true
      if: ${{ inputs.QEMU_SETUP == 'true' }}

    - name: Checkout repo
      uses: actions/checkout@v3


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET }}
        aws-region: ${{ inputs.AWS_ZONE }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.PROJECT }}-${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}
        flavor: |
          latest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=raw,value=${{ inputs.VERSION }}
          type=semver,pattern={{version}}
          type=sha

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from:
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.PROJECT }}-${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}:latest

    - name: set outputs
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.PROJECT }}-${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}
        IMAGE_TAG: ${{ inputs.VERSION }}
      id: set_outputs
      shell: bash
      run: |
        echo "tagged_image=${{ env.REGISTRY}}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: print tags
      shell: bash
      run: |
        echo ${{ steps.set_outputs.outputs.tagged_image }}
